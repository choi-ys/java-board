plugins {
    id 'org.springframework.boot' version '2.5.4'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
}

group = 'io.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    asciidoctorExtensions
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    snippetsDir = file('build/generated-snippets')
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-security'

    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-hateoas'

    implementation 'com.auth0:java-jwt:3.16.0'
    implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.7.0'
    implementation 'it.ozimov:embedded-redis:0.7.2'

    compileOnly 'org.projectlombok:lombok'

    runtimeOnly 'com.h2database:h2'

    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    asciidoctorExtensions 'org.springframework.restdocs:spring-restdocs-asciidoctor'
}

test {
    useJUnitPlatform()
    outputs.dir snippetsDir
}

asciidoctor {
    configurations 'asciidoctorExtensions'
    inputs.dir snippetsDir
    dependsOn test
}

task copyDocument(type: Copy) {
    dependsOn asciidoctor

    from "${asciidoctor.outputDir}"
    into file("src/main/resources/static/docs")
}

build {
    dependsOn copyDocument
}

/**
 * Gradle build 최적화
 * - https://kangwoojin.github.io/programing/gradle-build-performace-2/#report-generation
 */
//// Parallel Testing Option : 이용 가능한 CPU의 반을 사용하여 TC 수행
//tasks.withType(Test) {
//    maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
//}
//
//// Parallel Testing
//tasks.withType(Test) {
//    forkEvery = 100
//}

//// Report generationPermalink Options : TC 수행 결과 Report 생성 제외로 인한 성능 향상
//tasks.withType(Test) {
//    reports.html.enabled = false
//    reports.junitXml.enabled = false
//}
//
//// Compiler daemon Options
//tasks.withType(JavaCompile) {
//    options.fork = true
//}
